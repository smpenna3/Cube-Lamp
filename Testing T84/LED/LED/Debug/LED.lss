
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000084  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b3  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e8  00000000  00000000  00000717  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000273  00000000  00000000  00000bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fd  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001195  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001225  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	27 c0       	rjmp	.+78     	; 0x80 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:

	// Set delay time
	const int delay_time = 500;

	// Set PORTA5 and PORTA7 to output
	DDRA |= ((1 << PA5) | (1 << PA7));
  34:	8a b3       	in	r24, 0x1a	; 26
  36:	80 6a       	ori	r24, 0xA0	; 160
  38:	8a bb       	out	0x1a, r24	; 26

	// Set PORTB2 to output
	DDRB |= (1 << PB2);
  3a:	ba 9a       	sbi	0x17, 2	; 23

    while (1) 
    {
		// Turn on PA5
		PORTA |= (1 << PA5);
  3c:	dd 9a       	sbi	0x1b, 5	; 27
		PORTB &= ~(1 << PB2);
  3e:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  40:	2f e9       	ldi	r18, 0x9F	; 159
  42:	86 e8       	ldi	r24, 0x86	; 134
  44:	91 e0       	ldi	r25, 0x01	; 1
  46:	21 50       	subi	r18, 0x01	; 1
  48:	80 40       	sbci	r24, 0x00	; 0
  4a:	90 40       	sbci	r25, 0x00	; 0
  4c:	e1 f7       	brne	.-8      	; 0x46 <__SREG__+0x7>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <__SREG__+0x11>
  50:	00 00       	nop

		_delay_ms(delay_time);

		// Turn on PA7
		PORTA &= ~(1 << PA5);
  52:	dd 98       	cbi	0x1b, 5	; 27
		PORTA |= (1 << PA7);
  54:	df 9a       	sbi	0x1b, 7	; 27
  56:	2f e9       	ldi	r18, 0x9F	; 159
  58:	86 e8       	ldi	r24, 0x86	; 134
  5a:	91 e0       	ldi	r25, 0x01	; 1
  5c:	21 50       	subi	r18, 0x01	; 1
  5e:	80 40       	sbci	r24, 0x00	; 0
  60:	90 40       	sbci	r25, 0x00	; 0
  62:	e1 f7       	brne	.-8      	; 0x5c <__SREG__+0x1d>
  64:	00 c0       	rjmp	.+0      	; 0x66 <__SREG__+0x27>
  66:	00 00       	nop

		_delay_ms(delay_time);

		// Turn on PB2
		PORTA &= ~(1 << PA7);
  68:	df 98       	cbi	0x1b, 7	; 27
		PORTB |= (1 << PB2);
  6a:	c2 9a       	sbi	0x18, 2	; 24
  6c:	2f e9       	ldi	r18, 0x9F	; 159
  6e:	86 e8       	ldi	r24, 0x86	; 134
  70:	91 e0       	ldi	r25, 0x01	; 1
  72:	21 50       	subi	r18, 0x01	; 1
  74:	80 40       	sbci	r24, 0x00	; 0
  76:	90 40       	sbci	r25, 0x00	; 0
  78:	e1 f7       	brne	.-8      	; 0x72 <__SREG__+0x33>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <__SREG__+0x3d>
  7c:	00 00       	nop
  7e:	de cf       	rjmp	.-68     	; 0x3c <main+0x8>

00000080 <_exit>:
  80:	f8 94       	cli

00000082 <__stop_program>:
  82:	ff cf       	rjmp	.-2      	; 0x82 <__stop_program>
